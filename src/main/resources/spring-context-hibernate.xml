<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:util="http://www.springframework.org/schema/util" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.2.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
    
    <description>Hibernate Configuration</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/techblog.properties" />
	
    <!-- 配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	    <property name="driverClassName" value="${jdbc.driver}"></property>
	    <property name="url" value="${jdbc.url}"></property>
	    <property name="username" value="${jdbc.username}"></property>
	    <property name="password" value="${jdbc.password}"></property>
	</bean> -->
	
	<!-- 配置数据源 -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
		    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		    <property name="driverClassName" value="${jdbc.driver}" />
		    
			<!-- 基本属性 url、user、password -->
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
			
			<!-- 配置初始化大小、最小、最大 -->
			<property name="initialSize" value="3" />
			<property name="minIdle" value="3" /> 
			<property name="maxActive" value="20" />
			
			<!-- 配置获取连接等待超时的时间 -->
			<property name="maxWait" value="60000" />
			
			<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />
			
			<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
			<property name="minEvictableIdleTimeMillis" value="300000" />
			
			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />
			
			<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
			<property name="poolPreparedStatements" value="true" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
			
			<!-- 配置监控统计拦截的filters -->
		    <property name="filters" value="stat" /> 
		</bean>
	
	<!-- 配置SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	    <property name="hibernateProperties">
	        <props>
	            <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
	            <prop key="hibernate.hbm2ddl.auto">none</prop>
	            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
	            <prop key="hibernate.format_sql">false</prop>
	            <!-- 开启二级缓存 -->
	            <prop key="hibernate.cache.use_second_level_cache">true</prop>
	            <!-- 二级缓存的提供类 -->
	            <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
	            <!-- 二级缓存配置文件的位置 -->
	            <prop key="net.sf.ehcache.configurationResourceName">ehcache-hibernate.xml</prop>
	            <!-- 开启查询缓存 -->
        		<prop key="hibernate.cache.use_query_cache">true</prop>
	        </props>
	    </property>
	    <!-- 动态映射字段 -->
	    <property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
	    <!-- 注解扫描的包 -->
	    <property name="packagesToScan" value="org.xs.techblog" />
	    
	</bean>
    
    <!-- 定义事务管理器（声明式的事务） -->  
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
	<!-- 开启事务注解驱动 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <!--  声明式容器事务管理 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" propagation="REQUIRED" />
            <tx:method name="find*" read-only="true" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" /><!-- rollback-for="Throwable" -->
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
    
    <!-- 定义切面 -->
    <aop:config expose-proxy="true">
    	<!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* org.xs.techblog.common.persistence.QueryDao.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
</beans>